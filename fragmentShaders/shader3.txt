precision mediump float;
precision mediump int;

uniform float time;
uniform float brightness;
uniform float mousex;
uniform float mousey;

uniform float audioVolume;
varying vec2 vUv;
uniform sampler2D maskTexture;


vec3 hueRotate(vec3 colorIn){
    vec3 colorOut= vec3(colorIn.b, colorIn.r*2., colorIn.g);
    colorOut=mix(colorIn, colorOut, mousex );
    return colorOut;
}

float size = 20.0;
float speed= 1.0;

float randomize(vec2 coords)
{
	float a = 1.0;
    	float b = 1.0;
    	float c = 1.0;
    	float dt= dot(coords.xy ,vec2(a,b));
    	float sn= mod(dt,3.14);
    	return fract(sin(dt) * c);
}


float triangleWave(float x)
{
	x = mod(x,2.0);
	if (x > 1.0) x = -x+2.0;
	return x;
}

bool inSize(vec2 coords)
{
	vec2 box = coords.xy-mod(coords.xy, size);
	vec2 center = box+(size/2.0);
	float size = (triangleWave((time/1.01 * speed)+(randomize(box*98.0)*2.0))/2.0)*(size);
	return (abs(coords.x-center.x) < size && abs(coords.y-center.y) < size);
}

vec3 subMain(vec3 inputColor){
	vec3 color = vec3(0.0);
        if (inSize(gl_FragCoord.xy/4.)) color = vec3(1.,1.,1.);
        vec3 xout=inputColor*color*1.3;
	return mix(inputColor, xout, mousex);
}

void main(void) {

	vec2 p = .675-1.25*vUv;
        float a = time * (80.0+40.0) ;
	float d, e, f, g = 1.0 / 40.0+mousey/15. ,h ,i ,r ,q;

	e = 400.0 * ( p.x * 0.5 + 0.5 );
	f = 400.0 * ( p.y * 0.5 + 0.5 );
	i = 200.0 + sin( e * g + a / 150.0 ) * 20.0;
	d = 200.0 + cos( f * g / 2.0 ) * 18.0 + cos( e * g ) * 7.0;
	r = sqrt( pow( abs( i - e ), 2.0 ) + pow( abs( d - f ), 2.0 ) );
	q = f / r;
	e = ( r * cos( q ) ) - a / 2.0;
	f = ( r * sin( q ) ) - a / 2.0;
	d = sin( e * g ) * 176.0 + sin( e * g ) * 164.0 + r;
	h = ( ( f + d ) + a / 2.0 ) * g;
	i = cos( h + r * p.x / 1.3 ) * ( e + e + a ) + cos( q * g * 6.0 ) * ( r + h / 3.0 );
	h = sin( f * g ) * 144.0 - sin( e * g ) * 212.0 * p.x;
	h = ( h + ( f - e ) * q + sin( r - ( a + h ) / 7.0 ) * 10.0 + i / 4.0 ) * g;
	i += cos( h * 2.3 * sin( a / 350.0 - q ) ) * 184.0 * sin( q - ( r * 4.3 + a / 12.0 ) * g ) + tan( r * g + h ) * 184.0 * cos( r * g + h );
	i = mod( i / 5.6, 256.0 ) / 64.0;
	if ( i < 0.0 ) i += 4.0;
	if ( i >= 2.0 ) i = 4.0 - i;
	d = r / 350.0;
	d += sin( d * d * 8.0 ) * 0.52;
	f = ( sin( a * g ) + 1.0 ) / 2.0;
	vec3 mask = texture2D( maskTexture, vUv ).rgb;
	gl_FragColor = vec4( subMain( .25+vec3( f * i / 1.6, i / 2.0 + d / 13.0, i ) * d * p.x + vec3( i / 1.3 + d / 8.0, i / 2.0 + d / 18.0, i ) * d * ( 1.0 - p.x ) ), mask.r*brightness );

}


