precision mediump float;
precision mediump int;

uniform float time;
uniform float brightness;
uniform float mousex;
uniform float mousey;


varying vec2 vUv;
uniform sampler2D maskTexture;


#extension GL_OES_standard_derivatives : enable

vec3 s1(){
	vec2 p = -1.0 + 2.0 * vUv;
	p.x += sin(time+p.y*2.5)*0.2;
	p.y = dot(p,p);
	float len = 0.01 / length(p.x + sin(p.y * 5.0 + time));
	float len2 = 0.5 / length(p.x + sin(p.y+p.x * 2.0) + 0.2);
	len *= len2;
	float circle = 2.5 / length(vec2(sin(p.x + time), p.y));
	len *= circle;
	float vv = smoothstep(0.0,0.07,len);
	float vv2 = smoothstep(0.0,0.09,len+(sin(time+(p.x*0.4))*0.05));
	float vv3 = smoothstep(0.0,0.11,len+(sin(time*.5-(p.y*0.4))*0.09));
	vec3 color = vec3(1.0*vv3,vv2*0.8,vv*0.6)* vv;
        return color;
}

vec3 s2(){
	vec2 p =vUv;
        p.x=1.-p.x;        
	p = -1.0 + 2.0 * p;
	p.x += sin(time+p.y*2.5)*0.2;
	p.y = dot(p,p);
	float len = 0.01 / length(p.x + sin(p.y * 5.0 + time));
	float len2 = 0.5 / length(p.x + sin(p.y+p.x * 2.0) + 0.2);
	len *= len2;
	float circle = 2.5 / length(vec2(sin(p.x + time), p.y));
	len *= circle;
	float vv = smoothstep(0.0,0.07,len);
	float vv2 = smoothstep(0.0,0.09,len+(sin(time+(p.x*0.4))*0.05));
	float vv3 = smoothstep(0.0,0.11,len+(sin(time*.5-(p.y*0.4))*0.09));
	vec3 color = vec3(1.0*vv3,vv2*0.8,vv*0.6)* vv;
        return color;
}



void main( void ) {
	vec3 s1=s1();
	vec3 s2=s2();
	vec3 out1=s1;
	if (mousex > .2) out1=mix(s1, s1+s2, mousex);
        if (mousey > .3) out1=mix(out1, vec3(out1.r, out1.g, 1.-out1.b), mousey);
	vec3 mask = texture2D( maskTexture, vUv ).rgb;
	gl_FragColor = vec4(out1, ((mask.r+mask.g+mask.b)/3.0)*brightness);

}
