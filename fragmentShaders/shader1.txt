precision mediump float;
precision mediump int;

uniform float audioTime;
uniform float brightness;
uniform float mousex;
uniform float mousey;

varying vec2 vUv;
uniform sampler2D maskTexture;

vec3 hsv2rgb(  vec3 c )
{
 vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
rgb = rgb*rgb*(3.0-2.0*rgb);
 return c.z * mix( vec3(1.0), rgb, c.y);
}

float size = 20.0;
float speed= 1.0;

float randomize(vec2 coords)
{
	float a = 1.0;
    	float b = 1.0;
    	float c = 1.0;
    	float dt= dot(coords.xy ,vec2(a,b));
    	float sn= mod(dt,3.14);
    	return fract(sin(dt) * c);
}


float triangleWave(float x)
{
	x = mod(x,2.0);
	if (x > 1.0) x = -x+2.0;
	return x;
}

bool inSize(vec2 coords)
{
	vec2 box = coords.xy-mod(coords.xy, size);
	vec2 center = box+(size/2.0);
	float size = (triangleWave((audioTime/1.01 * speed)+(randomize(box*98.0)*2.0))/2.0)*(size);
	return (abs(coords.x-center.x) < size && abs(coords.y-center.y) < size);
}

vec3 subMain(){
	vec3 color = vec3(0.0);
        if (inSize(gl_FragCoord.xy/1.)) color = vec3(1.,1.,1.);
        vec3 xout=color;
	return xout;
}


void main( void ) {

	vec2 position = gl_FragCoord.xy/600.;
	vec3 color = vec3(0.1, 0.1, 0.1);
	color = hsv2rgb(vec3(audioTime * 0.3 + position.x - position.y,0.5,1.0));
        vec3 sm=subMain();
	vec3 mask = texture2D( maskTexture, vUv ).rgb;
        if( mousex < 0.15) if ( mousey < 0.3) gl_FragColor = vec4( color, mask.r*brightness);
        if( mousex < 0.15) if ( mousey >= 0.3) gl_FragColor = vec4( color+sm*mousey*.27, mask.r*brightness);
	if( mousex >= 0.15) if ( mousey < 0.3) gl_FragColor = vec4( mix(color,color*sm,mousex), mask.r*brightness);
	if( mousex >= 0.15) if ( mousey >= 0.3) gl_FragColor = vec4( mix(color,color*sm,mousex)+sm*mousey*.27, mask.r*brightness);
}

