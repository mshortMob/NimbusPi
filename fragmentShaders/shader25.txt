precision mediump float;
precision mediump int;

uniform float time;
uniform float brightness;

uniform float audioVolume;
varying vec2 vUv;
uniform sampler2D maskTexture;

#extension GL_OES_standard_derivatives : enable

vec2 trans(vec2 p){
    vec2 mp = abs(fract(p*3.0)*2.0-1.0);
    float x = (p.y < 0.5) ? max(mp.x, mp.y) : length(p);
    float y = (p.x < 0.5) ? min(mp.x, mp.y) : length(mp);
    vec2 q = p - vec2(x, y);
    return q;
}

void main()
{
    float t = fract(time*0.5);
    float mode = 1.0;
    float s = sign(sin(time/20.0));
    float speed = .1;
    
    vec2 uv = vUv;
    vec2 p = uv*2.0 - 1.0;
    //p = max(p, 1.0/(1.0 - abs(p)));
    //p.x = acos(abs(normalize(p).x));
    //p.y = min(sin(p.x),cos(p.x))*length(p);
    p += p/length(p)*(70.0*sin(time/30.))*s*speed;
    
    float x = (max(abs(p.x),abs(p.y))==abs(p.x)) ? abs(p.x) : abs(p.y);
    float y = (min(abs(p.x),abs(p.y))==abs(p.y)) ? abs(p.y) : abs(p.x);
    x = abs(fract(x)*2.0 - 1.0);
    y = abs(fract(y)*2.0 - 1.0);
    
    vec2 q =trans(fract(vec2(x,y)));

    vec3 col0 = abs(vec3(dot(vec2(1, -1), q))); // mono
    vec3 col1 = abs(vec3(0.2, 0.5, 0.8) - q.xyx);
	vec3 col = (s < 0.0) ? max(col0, mix(col0, col1, mode/7.0)) : min(col0, mix(col0, col1, mode/7.0));

    vec3 mask = texture2D( maskTexture, vUv ).rgb;
    gl_FragColor = vec4(col,mask.r*brightness*brightness);
}