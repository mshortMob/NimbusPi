precision mediump float;
precision mediump int;

uniform float time;
uniform float brightness;
uniform float mousex;
uniform float mousey;


varying vec2 vUv;
uniform sampler2D maskTexture;

#define ITERATIONS 4.0

#extension GL_OES_standard_derivatives : enable
vec2 pmod(vec2 p, float n) {
	float np = 3.1415926 * 2.0 / n;
	float r = atan(p.x, p.y) - 0.5 * np;
	r = mod(r, np) - 0.5 * np;
	return length(p) * vec2(cos(r), sin(r));
}

vec3 getS2(){
	vec2 uv = vUv;
	uv = (uv - 0.5) * 2.0;
	vec2 p = uv;
	p = pmod(p, 4.0);
	p -= time / 5.0;
	p = mod(p, 0.3) - 0.5 * 0.03;
	float l = step(1.0, 0.03 / length(p.x));
	return vec3(l)*2.;
}


void main() {
	vec2 p = -2.0 + 4.0 * vUv;
	p-=1.0;
	float d = length(p);
	

	for(float i = 1.0; i < ITERATIONS; i+=0.5) {
		p.x += 1.0 / i * sin(time*0.2-i * p.y);
		p.y += 1.0 / i * cos(time*0.9+i * p.x*0.8);
		if (i>ITERATIONS*0.5)
		{
		float yy = p.y;
		p.y = p.x;
		p.x = yy;
		}

	}

	vec3 col = vec3(sin(p.y+d*5.0-p.x*2.0), cos(p.y+p.x + time*0.9), sin(p.x*3.0));
	
	float d1 = length(col*col);
	vec3 col1 =vec3(0.3,0.4,0.6)*d1;
	vec3 col2 =vec3(0.3,0.5,0.95)*(d+1.);
	
	d1 = clamp(d1*d1,0.0,1.0);
	col = mix(col2,col1,d1)*0.8;
	vec3 out1=col;
        if (mousex > .12) out1=mix(col, col*getS2(), mousex);
        if (mousey > .3) out1=mix(out1, out1+getS2(), mousey);
	vec3 mask = texture2D( maskTexture, vUv ).rgb;
	gl_FragColor = vec4( out1, ((mask.r+mask.g+mask.b)/3.0)*brightness);
}
