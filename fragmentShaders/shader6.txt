precision mediump float;
precision mediump int;

uniform float time;
uniform float brightness;
uniform float mousex;
uniform float mousey;

uniform float audioVolume;
varying vec2 vUv;
uniform sampler2D maskTexture;


vec3 hueRotate(vec3 colorIn){
    vec3 colorOut=smoothstep(colorIn, vec3( 1., 1., 1. ), vec3(mousey/.5) );
    colorOut=mix(colorIn, colorOut, mousex );
    return colorOut;
}

vec3 strips (vec3 colorIn) {
    vec2 st = vUv;
    st *= 2.0; // Scale the coordinate system by 10
    vec2 ipos = floor(st);  // get the integer coords
    vec2 fpos = fract(st);  // get the fractional coords
    vec3 temp= vec3(fract(sin(dot(st.xy, vec2(10.7222724+sin(time)*1.,10.53111424+sin(time)*1.))) ) );
    return mix(colorIn,temp*colorIn,mousey);
}


void main( void ) {

	vec2 position = -.50+1.*vUv;
		position=position*position*vec2(-1.0, 1.0)+ vec2(2.5, 2.5);

	float color = 0.0;
	color += sin( position.x * cos( time / 55.0 ) * 80.0 ) + cos( position.y * cos( time / 15.0 ) * 30.0 );
	color += sin( position.y * sin( time / 100.0 ) * 40.0 ) + cos( position.x * sin( time / 45.0 ) * 70.0 );
	color += sin( position.x * sin( time / 25.0 ) * 10.0 ) + sin( position.y * sin( time / 35.0 ) * 110.0 );
	color *= sin( time / 500.0 ) * 1.5;
	vec3 mask = texture2D( maskTexture, vUv ).rgb;
        gl_FragColor = vec4( strips(hueRotate( vec3( color * 16.0,  color * 6.0,  0.0 ) ) ), mask.r*brightness );
	//gl_FragColor = vec4( hueRotate( vec3( color * 16.0,  color * 6.0,  0.0 ) ), mask.r*brightness );

}
