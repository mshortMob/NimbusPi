precision mediump float;
precision mediump int;

uniform float audioTime;
uniform float brightness;
uniform float mousex;
uniform float mousey;


varying vec2 vUv;
uniform sampler2D maskTexture;


vec3 getShader1(){
	vec2 position = -.50+1.*vUv;
	position=position*position*vec2(-1.0, 1.0)+ vec2(2.5, 2.5);
	float color = 0.0;
	color += sin( position.x * cos( audioTime / 75.0 ) * 80.0 ) + cos( position.y * cos( audioTime / 25.0 ) * 30.0 );
	color += sin( position.y * sin( audioTime / 120.0 ) * 40.0 ) + cos( position.x * sin( audioTime / 55.0 ) * 70.0 );
	color += sin( position.x * sin( audioTime / 55.0 ) * 10.0 ) + sin( position.y * sin( audioTime / 45.0 ) * 110.0 );
	color *= sin( audioTime / 500.0 ) * 1.5;
        return vec3(color);
}



vec3 getShader2() {
	vec2 p = ( -1.0 - (24.0+ 48.0 * abs(0.0*0.))  )/2.0 - ( -1.0 - (24.0+ 48.0 * abs(0.0*0.))  ) * vUv;
	p=p*p*vec2(-1.0, 1.0)+ vec2(2.5, 2.5);
	p.y*= .02;
	p.x*= .02;

	for(int i=1;i<5;i++)
	{
		vec2 newp=p;
		float speed = 60.0+30.0; // speed control
		newp.x+=0.8/float(i)*sin(float(i)*p.y+audioTime/(100.0/speed)+0.8*float(i))+1.0;
		newp.y+=0.8/float(i)*sin(float(i)*p.x+audioTime/(100.0/speed)+0.3*float(i+10))-11.4;
		p=newp;
	}
	vec3 col=vec3( 0.0, sin(p.x*1.+p.y), 0.9*sin(12.0*p.y));
        col=vec3(col.g, col.b+col.g, col.g );
        return col;
}

vec3 hueRotate(vec3 inColor){
    vec3 c=vec3(inColor.r*abs(cos(audioTime*1.5)), inColor.g*abs(cos(audioTime*1.)), inColor.b*abs(sin(audioTime*1.)) );
    return mix(inColor, c/2., mousex);
}

void main( void ) {

	vec3 mask = texture2D( maskTexture, vUv ).rgb;
        gl_FragColor = vec4( hueRotate(mix(getShader2()*5., getShader1()*getShader2()*3.5, mousey)) , mask.r*brightness );

}
