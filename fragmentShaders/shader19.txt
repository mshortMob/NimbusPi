precision mediump float;
precision mediump int;

uniform float time;
uniform float brightness;
uniform float mousex;
uniform float mousey;


varying vec2 vUv;
uniform sampler2D maskTexture;

const float count = 4.0;

float Hash( vec2 p, in float s)
{
  vec3 p2 = vec3(p.xy,27.0 * abs(sin(s)));
  return fract(sin(dot(p2,vec3(27.1,61.7, 12.4)))*273758.5453123);
}

float noise(in vec2 p, in float s)
{
  vec2 i = floor(p);
  vec2 f = fract(p);
  f *= f * (3.0-2.0*f);

  return mix(mix(Hash(i + vec2(0.,0.), s), Hash(i + vec2(1.,0.), s),f.x),
      mix(Hash(i + vec2(0.,1.), s), Hash(i + vec2(1.,1.), s),f.x),
      f.y) * s;
}

float fbm(vec2 p)
{
  float v = 0.0;
  v += noise(p*1., 0.8);
  v += noise(p*2., 0.35);
  v += noise(p*4., 0.125);
  v += noise(p*8., 0.0625);
  return v;
}

void main( void ) {
  vec4 o = vec4(1, 1, 1, 1);
  vec2 uv = vUv * 2.4 - 1.66;
  uv.y -= .55;
  uv.x += .45;
  uv.y=uv.y/2.;
	
  vec3 finalColor = vec3( 0 );
  for( float i=1.; i < count; ++i )
  {
     float t = abs(uv.x / ((uv.y + fbm( vec2(-length(uv) )+ time/i)) * (1.+30.*mousex)));
    finalColor +=  t * vec3( i * 0.075 +0.1, 0.5, 2.0 );
  }
  
  float alpha = 1.0;
  vec3 col=vec3(1.5*sin(1.0*uv.x)+0.5, 0.5*cos(3.0*uv.y)+0.3, cos(uv.x+uv.y));
  vec3 out1=finalColor * col * (1.+mousex*1.5);
  vec3 out2=mix(out1,vec3(out1.b, out1.r, out1.g),mousey);
  vec3 mask = texture2D( maskTexture, vUv ).rgb;
  gl_FragColor = vec4( out2, alpha*mask.r*brightness);

}
