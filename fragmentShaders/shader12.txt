precision mediump float;
precision mediump int;

uniform float audioTime;
uniform float brightness;
uniform float mousex;
uniform float mousey;


varying vec2 vUv;
uniform sampler2D maskTexture;

vec3 getShader1(){
	vec2 uv, p = -1.5+3.0*vUv;
	vec3 color = vec3(0.0);
	float z = audioTime/27., l = length(p);	
	for (int i = 0; i < 2; i++) {
		uv = p;
		z -= .09;
		uv += p / l * (-tan(z) + 1.) * abs(sin(l * 2. - z * 20.));
		color[i] = .01 / length(abs(mod(uv, 1.)) - .5);
	}
	return ( color + vec3(0., 0., color.r+color.g) ) * 15.;
}

vec3 getShader2(){
	vec2 uv, p = -1.+2.0*vUv;
	vec3 color = vec3(0.0);
	float z = audioTime/33., l = length(p);	
	for (int i = 0; i < 2; i++) {
		uv = p;
		z -= .17;
		uv += p / l * (-tan(z) + 1.) * abs(sin(l * 2. - z * 20.));
		color[i] = .01 / length(abs(mod(uv, 1.)) - .5);
	}
	return ( color + vec3(color.g, color.g, color.g) ) * 15.;
}

void main( void ) {
    vec3 s1=getShader1();
    vec3 s2=getShader2();
    vec3 temp1=2.0*(s1-s2);
    vec3 out1=mix(s1, vec3(temp1.b, temp1.r, temp1.g), mousex);
    out1=mix(out1, vec3(out1.r, out1.r, out1.r), mousey);
    vec3 mask = texture2D( maskTexture, vUv ).rgb;
    gl_FragColor = vec4( out1, ((mask.r+mask.g+mask.b)/3.0)*brightness );
}
