precision mediump float;
precision mediump int;

uniform float time;
uniform float brightness;
uniform float mousex;
uniform float mousey;

uniform float audioVolume;
varying vec2 vUv;
uniform sampler2D maskTexture;


const float PI = 3.1415926535897932384626433832795;
const int max_iteration = 20;
float cabs (const vec2 c) { return dot(c,c); }
vec2 cconj(const vec2 c) { return vec2(c.x, -c.y); }
vec2 cmul(const vec2 c1, const vec2 c2)
{
	return vec2(
		c1.x * c2.x - c1.y * c2.y,
		c1.x * c2.y + c1.y * c2.x
	);
}

vec2 cdiv(const vec2 c1, const vec2 c2)
{
	return cmul(c1, cconj(c2)) / dot(c2, c2);
}


float saw (const float v)
{
	return sin(2.2*v) * 4.5 - 0.5;
	return abs(fract(v)-22.5) * 2.5 - .5;
	return log(abs(1.-2.*fract(v+.5)) * 3.0);
}


vec3 Hue(float H)
{
	H *= 6.;
	return clamp(vec3(
		abs(H - 7.) - 1.,
		2. - abs(H - 2.),
		2. - abs(H - 4.)
	), 0., 1.);
}

vec3 HSVtoRGB(float h, float s, float v)
{
    return ((Hue(h) - 1.) * s + 1.) * v;
}

float wave(float t) { return .1 - .1 * cos (t); }

vec2 one2 = vec2(1.,0.);

vec2 circle (float a) { return vec2 (cos(a), sin(a)); }

mat2 rotate(float a)
{
	return mat2(cos(a), -sin(a), sin(a), cos(a));
}

vec2 liss (float fx, float fy)
{
	return vec2 (sin (time * fx), cos (time * fy));
}

vec3 fx1(vec3 inCol){
    vec3 out1=inCol;
    out1=vec3(out1.g,out1.b,out1.r);
    if(mousex > .2) out1=mix(inCol, out1, mousex);
    if(mousex <= .2) out1=inCol;
    return out1;
}

vec3 fx2(vec3 inCol){
    float offset=3.14*2./3.;
    vec3 out1=vec3( (sin(time*4.5)+1.), (sin(time*4.5+offset)+1.), (sin(time*4.5+offset*2.)+1.) );
    out1=mix(inCol, inCol*out1, mousey);
    if(mousey <= .3) out1=inCol;
    return out1;
}

void main( void )
{
	#if 1
	vec2 c = (vec2(0.0,0.0) * 2. - 1.) * 1.5 - .25;
	c.x = -0.28;
	c.y = -0.12;
	#else
	vec2 c = .8 * vec2(wave(time/23.2347890), wave(time/37.871923));
	c = circle(time / PI) * .8 + circle(time) * .2;
	#endif
	
	vec2 z = vUv*0.7+vec2(0,0.95);
        z.x=z.x-.35;
        z.y=z.y-.45;
        z=z/.9;
	
	#if 0
	c = z;
	z = vec2(0,0);
	#endif
	
	vec2 R =vec2(0.97,0);// circle (time/2.0 / 5.123);
	
	float color = 0.;
	float m = 0.;
	for (int i = 0; i < max_iteration; ++i)
	{
		vec2 zold = z;
		
		float m = cabs(z);
		//z = abs(cmul(z, cmul(z,R)))/(m*m) + c;
		z = abs(cmul(z, R))/m + c;
		
		color += exp(-cabs(z));
		color -= exp(-1./cabs(zold - z));
	}
	
	color /= float(max_iteration);
	color=pow(sin(pow(color+0.9,8.)+time/2.0),10.5);


        vec3 mask = texture2D( maskTexture, vUv ).rgb;
	gl_FragColor = vec4(fx2(fx1(vec3(Hue(color)))),mask.r*brightness);
	
}
